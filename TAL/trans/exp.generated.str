module trans/exp.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-


signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-type-task(|ctx) :
    NumVal(_) -> <task-create-id(|ctx,[x819])> x819
    where 
      x819 := <type-is(|ctx)> IntTy()
  
  create-type-task(|ctx) :
    StringVal(_) -> <task-create-id(|ctx,[x820])> x820
    where 
      x820 := <type-is(|ctx)> StringTy()
  
  create-type-task(|ctx) :
    Eq(e1, e2) -> <task-create-id(|ctx,[x821])> x821
    where 
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq68 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq68, ["incompatible type"])> e2;
      x821 := <type-is(|ctx); task-create-id(|ctx, [eq68])> BoolTy()
  
  create-type-task(|ctx) :
    Neq(e1, e2) -> <task-create-id(|ctx,[x821])> x821
    where 
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq69 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq69, ["incompatible type"])> e2;
      x821 := <type-is(|ctx); task-create-id(|ctx, [eq69])> BoolTy()
  
  create-type-task(|ctx) :
    Lte(e1, e2) -> <task-create-id(|ctx,[x824])> x824
    where 
      x822 := <type-task(|ctx)> e1;
      eq70 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x822])> x822;
      <task-create-error-on-failure(|ctx, eq70, ["integer expression expected"])> e1;
      x823 := <type-task(|ctx); task-create-id(|ctx, [eq70])> e2;
      eq71 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x823])> x823;
      <task-create-error-on-failure(|ctx, eq71, ["integer expression expected"])> e2;
      x824 := <type-is(|ctx); task-create-id(|ctx, [eq71])> BoolTy()
  
  create-type-task(|ctx) :
    Lt(e1, e2) -> <task-create-id(|ctx,[x824])> x824
    where 
      x822 := <type-task(|ctx)> e1;
      eq72 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x822])> x822;
      <task-create-error-on-failure(|ctx, eq72, ["integer expression expected"])> e1;
      x823 := <type-task(|ctx); task-create-id(|ctx, [eq72])> e2;
      eq73 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x823])> x823;
      <task-create-error-on-failure(|ctx, eq73, ["integer expression expected"])> e2;
      x824 := <type-is(|ctx); task-create-id(|ctx, [eq73])> BoolTy()
  
  create-type-task(|ctx) :
    Gte(e1, e2) -> <task-create-id(|ctx,[x824])> x824
    where 
      x822 := <type-task(|ctx)> e1;
      eq74 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x822])> x822;
      <task-create-error-on-failure(|ctx, eq74, ["integer expression expected"])> e1;
      x823 := <type-task(|ctx); task-create-id(|ctx, [eq74])> e2;
      eq75 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x823])> x823;
      <task-create-error-on-failure(|ctx, eq75, ["integer expression expected"])> e2;
      x824 := <type-is(|ctx); task-create-id(|ctx, [eq75])> BoolTy()
  
  create-type-task(|ctx) :
    Gt(e1, e2) -> <task-create-id(|ctx,[x824])> x824
    where 
      x822 := <type-task(|ctx)> e1;
      eq76 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x822])> x822;
      <task-create-error-on-failure(|ctx, eq76, ["integer expression expected"])> e1;
      x823 := <type-task(|ctx); task-create-id(|ctx, [eq76])> e2;
      eq77 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x823])> x823;
      <task-create-error-on-failure(|ctx, eq77, ["integer expression expected"])> e2;
      x824 := <type-is(|ctx); task-create-id(|ctx, [eq77])> BoolTy()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x827])> x827
    where 
      x825 := <type-task(|ctx)> e1;
      eq78 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x825])> x825;
      <task-create-error-on-failure(|ctx, eq78, ["boolean expression expected"])> e1;
      x826 := <type-task(|ctx); task-create-id(|ctx, [eq78])> e2;
      eq79 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x826])> x826;
      <task-create-error-on-failure(|ctx, eq79, ["boolean expression expected"])> e2;
      x827 := <type-is(|ctx); task-create-id(|ctx, [eq79])> BoolTy()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x827])> x827
    where 
      x825 := <type-task(|ctx)> e1;
      eq80 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x825])> x825;
      <task-create-error-on-failure(|ctx, eq80, ["boolean expression expected"])> e1;
      x826 := <type-task(|ctx); task-create-id(|ctx, [eq80])> e2;
      eq81 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x826])> x826;
      <task-create-error-on-failure(|ctx, eq81, ["boolean expression expected"])> e2;
      x827 := <type-is(|ctx); task-create-id(|ctx, [eq81])> BoolTy()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x829])> x829
    where 
      x828 := <type-task(|ctx)> e;
      eq82 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x828])> x828;
      <task-create-error-on-failure(|ctx, eq82, ["boolean expression expected"])> e;
      x829 := <type-is(|ctx); task-create-id(|ctx, [eq82])> BoolTy()
  

rules // projections
  
