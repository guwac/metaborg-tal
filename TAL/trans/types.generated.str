module trans/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  include/TAL
  
signature constructors
  
  IntTy : Type
  StringTy : Type
  BoolTy : Type
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-type-task(|ctx) :
    NumVal(_) -> <task-create-id(|ctx,[x1204])> x1204
    where 
      x1204 := <type-is(|ctx)> IntTy()
  
  create-type-task(|ctx) :
    StringVal(_) -> <task-create-id(|ctx,[x1205])> x1205
    where 
      x1205 := <type-is(|ctx)> StringTy()
  
  create-type-task(|ctx) :
    Eq(e1, e2) -> <task-create-id(|ctx,[x1206])> x1206
    where 
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq188 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq188, ["incompatible type"])> e2;
      x1206 := <type-is(|ctx); task-create-id(|ctx, [eq188])> BoolTy()
  
  create-type-task(|ctx) :
    Neq(e1, e2) -> <task-create-id(|ctx,[x1206])> x1206
    where 
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq189 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq189, ["incompatible type"])> e2;
      x1206 := <type-is(|ctx); task-create-id(|ctx, [eq189])> BoolTy()
  
  create-type-task(|ctx) :
    Lte(e1, e2) -> <task-create-id(|ctx,[x1209])> x1209
    where 
      x1207 := <type-task(|ctx)> e1;
      eq190 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1207])> x1207;
      <task-create-error-on-failure(|ctx, eq190, ["integer expression expected"])> e1;
      x1208 := <type-task(|ctx); task-create-id(|ctx, [eq190])> e2;
      eq191 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1208])> x1208;
      <task-create-error-on-failure(|ctx, eq191, ["integer expression expected"])> e2;
      x1209 := <type-is(|ctx); task-create-id(|ctx, [eq191])> BoolTy()
  
  create-type-task(|ctx) :
    Lt(e1, e2) -> <task-create-id(|ctx,[x1209])> x1209
    where 
      x1207 := <type-task(|ctx)> e1;
      eq192 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1207])> x1207;
      <task-create-error-on-failure(|ctx, eq192, ["integer expression expected"])> e1;
      x1208 := <type-task(|ctx); task-create-id(|ctx, [eq192])> e2;
      eq193 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1208])> x1208;
      <task-create-error-on-failure(|ctx, eq193, ["integer expression expected"])> e2;
      x1209 := <type-is(|ctx); task-create-id(|ctx, [eq193])> BoolTy()
  
  create-type-task(|ctx) :
    Gte(e1, e2) -> <task-create-id(|ctx,[x1209])> x1209
    where 
      x1207 := <type-task(|ctx)> e1;
      eq194 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1207])> x1207;
      <task-create-error-on-failure(|ctx, eq194, ["integer expression expected"])> e1;
      x1208 := <type-task(|ctx); task-create-id(|ctx, [eq194])> e2;
      eq195 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1208])> x1208;
      <task-create-error-on-failure(|ctx, eq195, ["integer expression expected"])> e2;
      x1209 := <type-is(|ctx); task-create-id(|ctx, [eq195])> BoolTy()
  
  create-type-task(|ctx) :
    Gt(e1, e2) -> <task-create-id(|ctx,[x1209])> x1209
    where 
      x1207 := <type-task(|ctx)> e1;
      eq196 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1207])> x1207;
      <task-create-error-on-failure(|ctx, eq196, ["integer expression expected"])> e1;
      x1208 := <type-task(|ctx); task-create-id(|ctx, [eq196])> e2;
      eq197 := <type-match(|ctx, IntTy()); task-create-id(|ctx, [x1208])> x1208;
      <task-create-error-on-failure(|ctx, eq197, ["integer expression expected"])> e2;
      x1209 := <type-is(|ctx); task-create-id(|ctx, [eq197])> BoolTy()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x1212])> x1212
    where 
      x1210 := <type-task(|ctx)> e1;
      eq198 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x1210])> x1210;
      <task-create-error-on-failure(|ctx, eq198, ["boolean expression expected"])> e1;
      x1211 := <type-task(|ctx); task-create-id(|ctx, [eq198])> e2;
      eq199 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x1211])> x1211;
      <task-create-error-on-failure(|ctx, eq199, ["boolean expression expected"])> e2;
      x1212 := <type-is(|ctx); task-create-id(|ctx, [eq199])> BoolTy()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x1212])> x1212
    where 
      x1210 := <type-task(|ctx)> e1;
      eq200 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x1210])> x1210;
      <task-create-error-on-failure(|ctx, eq200, ["boolean expression expected"])> e1;
      x1211 := <type-task(|ctx); task-create-id(|ctx, [eq200])> e2;
      eq201 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x1211])> x1211;
      <task-create-error-on-failure(|ctx, eq201, ["boolean expression expected"])> e2;
      x1212 := <type-is(|ctx); task-create-id(|ctx, [eq201])> BoolTy()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x1214])> x1214
    where 
      x1213 := <type-task(|ctx)> e;
      eq202 := <type-match(|ctx, BoolTy()); task-create-id(|ctx, [x1213])> x1213;
      <task-create-error-on-failure(|ctx, eq202, ["boolean expression expected"])> e;
      x1214 := <type-is(|ctx); task-create-id(|ctx, [eq202])> BoolTy()
  

rules // projections
  
